package darkoverload.itzip.feature.resume.mock;

import darkoverload.itzip.feature.resume.domain.language.Language;
import darkoverload.itzip.feature.resume.domain.myskill.MySkill;
import darkoverload.itzip.feature.resume.domain.resume.Resume;
import darkoverload.itzip.feature.resume.service.resume.port.MySkillRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeMySkillRepository implements MySkillRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<MySkill> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public List<MySkill> findByAllResumeId(Long resumeId) {
        return data.stream()
                .filter(mySkill -> Objects.equals(mySkill.getMySkillId(), resumeId))
                .toList();
    }

    @Override
    public List<MySkill> update(List<MySkill> mySkills) {
        return saveAll(mySkills);
    }

    @Override
    public MySkill save(MySkill mySkill) {
        if (mySkill.getMySkillId() == null || mySkill.getMySkillId() == 0) {
            MySkill newMySkill = MySkill.builder()
                    .mySkillId(autoGeneratedId.incrementAndGet())
                    .resume(mySkill.getResume())
                    .name(mySkill.getName())
                    .build();

            data.add(newMySkill);
            return newMySkill;
        }

        data.removeIf(item -> Objects.equals(item.getMySkillId(), mySkill.getMySkillId()));
        data.add(mySkill);
        return mySkill;
    }

    @Override
    public List<MySkill> saveAll(List<MySkill> mySkill) {
        return mySkill.stream().map(this::save).toList();
    }

    @Override
    public void deleteAllById(List<Long> ids) {
        for(Long id: ids) {
            data.removeIf(item -> Objects.equals(item.getMySkillId(), id));
        }
    }

    @Override
    public void deleteAllMySkills(List<MySkill> deleteMySkills) {
        deleteMySkills.stream().map(MySkill::getMySkillId)
                .forEach(id -> data.removeIf(mySkill -> mySkill.getMySkillId().equals(id)));
    }

    private List<Long> getMySkillDeleteIds(List<MySkill> mySkills, Resume resume) {
        List<Long> mySkillIds = getMySkillIds(resume.getResumeId());
        List<Long> updateIds = getMySkillUpdateIds(mySkills);

        return mySkillIds.stream().filter(id-> !updateIds.contains(id)).toList();
    }

    private List<Long> getMySkillUpdateIds(List<MySkill> mySkills) {
        return mySkills.stream().filter(Objects::nonNull).map(MySkill::getMySkillId).toList();
    }

    private List<Long> getMySkillIds(Long resumeId) {
        return findByAllResumeId(resumeId).stream().map(MySkill::getMySkillId).toList();
    }

}
