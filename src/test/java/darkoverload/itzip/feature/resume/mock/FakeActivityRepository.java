package darkoverload.itzip.feature.resume.mock;

import darkoverload.itzip.feature.resume.domain.activity.Activity;
import darkoverload.itzip.feature.resume.service.resume.port.activity.ActivityReadRepository;
import darkoverload.itzip.feature.resume.service.resume.port.activity.ActivityRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeActivityRepository implements ActivityRepository, ActivityReadRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Activity> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public List<Activity> findAllByResumeId(Long resumeId) {
        return data.stream()
                .filter(activity -> Objects.equals(activity.getResume().getResumeId(), resumeId)).toList();
    }

    @Override
    public Activity save(Activity activity) {
        if(activity.getActivityId() == null || activity.getActivityId() == 0) {
            Activity newActivity = Activity.builder()
                    .activityId(autoGeneratedId.incrementAndGet())
                    .resume(activity.getResume())
                    .name(activity.getName())
                    .content(activity.getContent())
                    .startDate(activity.getStartDate())
                    .endDate(activity.getEndDate())
                    .build();

            data.add(newActivity);
            return newActivity;
        }
        data.removeIf(item -> Objects.equals(item.getActivityId(), activity.getActivityId()));
        data.add(activity);

        return activity;
    }

    @Override
    public List<Activity> update(List<Activity> activities) {
        return saveAll(activities);
    }

    @Override
    public List<Activity> saveAll(List<Activity> activities) {
        return activities.stream().map(this::save).toList();
    }

    @Override
    public void deleteAllActivities(List<Activity> deleteActivities) {
        deleteActivities.stream().map(Activity::getActivityId)
                .forEach(id -> data.removeIf(activity -> activity.getActivityId().equals(id)));
    }

}
