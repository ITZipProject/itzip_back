package darkoverload.itzip.feature.resume.mock;

import darkoverload.itzip.feature.resume.domain.achievement.Achievement;
import darkoverload.itzip.feature.resume.service.resume.port.achievement.AchievementReadRepository;
import darkoverload.itzip.feature.resume.service.resume.port.achievement.AchievementCommandRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeAchievementCommandRepository implements AchievementCommandRepository, AchievementReadRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Achievement> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public List<Achievement> findAllByResumeId(Long resumeId) {
        return data.stream()
                .filter(achievement -> Objects.equals(achievement.getResume().getResumeId(), resumeId))
                .toList();
    }

    @Override
    public Achievement save(Achievement achievement) {
        if (achievement.getAchievementId() == null || achievement.getAchievementId() == 0) {
            Achievement newAchievement = Achievement.builder()
                    .achievementId(autoGeneratedId.incrementAndGet())
                    .resume(achievement.getResume())
                    .name(achievement.getName())
                    .organization(achievement.getOrganization())
                    .content(achievement.getContent())
                    .achievementDate(achievement.getAchievementDate())
                    .build();

            data.add(newAchievement);
            return newAchievement;
        }

        data.removeIf(item -> Objects.equals(item.getAchievementId(), achievement.getAchievementId()));
        data.add(achievement);

        return achievement;
    }

    @Override
    public List<Achievement> update(List<Achievement> achievements) {
        return saveAll(achievements);
    }

    @Override
    public List<Achievement> saveAll(List<Achievement> achievements) {
        return achievements.stream().map(this::save).toList();
    }

    @Override
    public void deleteAllById(List<Long> ids) {
        for (Long id : ids) {
            data.removeIf(item -> Objects.equals(item.getAchievementId(), id));
        }
    }

    @Override
    public void deleteAllAchievements(List<Achievement> deleteAchievements) {
        deleteAchievements.stream().map(Achievement::getAchievementId)
                .forEach(id -> data.removeIf(achievement -> achievement.getAchievementId().equals(id)));
    }

}
