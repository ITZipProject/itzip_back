name: Java CI with Gradle Build Sonarqube

on:
  pull_request:
    branches:
      - '*'

jobs:
  sonarqube:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Secret Prod Env File Download
        run: |
          mkdir -p ./src/main/resources/properties
          echo "${{ secrets.PROD_ENV_FILE }}" > ./src/main/resources/properties/env.properties

      - name: Secret Test Env File Download
        run: |
          mkdir -p ./src/test/resources/properties
          echo "${{ secrets.TEST_ENV_FILE }}" > ./src/test/resources/properties/test-env.properties

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: ./gradlew build sonar

      - name: Send SonarQube Analysis Result to Discord
        env:
          SONAR_PROJECT_NAME: ${{ secrets.SONAR_PROJECT_NAME }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" \
            -d "{\"content\": \"📊 **SonarQube 분석 결과**\n\n프로젝트: **${SONAR_PROJECT_NAME}**\nPull Request 번호: **${PR_NUMBER}**\n분석 결과 링크: [SonarQube 결과 확인하기](${SONAR_HOST_URL})\"}" \
            $DISCORD_WEBHOOK_URL
