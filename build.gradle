plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id "org.sonarqube" version "6.0.1.5171"
    id "jacoco"
}

group = 'darkoverload'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starter Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // Spring Hateoas
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    // Spring Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // H2
    runtimeOnly 'com.h2database:h2'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // MongoDB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // PostgreSQL
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.19'

    // Elastic Search
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

    // Logback
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

    // Prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // SpringBoot 3.x later for QueryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Swagger UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // AWS for Bucket
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    testImplementation 'io.findify:s3mock_2.12:0.2.4'

    // Apache Tika Core
    implementation 'org.apache.tika:tika-core:1.28.4'

    // File Upload
    implementation 'commons-io:commons-io:2.14.0'
    implementation 'commons-fileupload:commons-fileupload:1.5'

    // Image Resize
    implementation 'com.github.downgoon:marvin:1.5.5'
    implementation 'com.github.downgoon:MarvinPlugins:1.5.5'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Lombok for Test Code
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // JUnit5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

    // Mockito
    testImplementation 'org.mockito:mockito-core:4.0.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.0.0'

    // JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // Json
    implementation 'com.google.code.gson:gson'

    // Json-Simple
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    // Validation
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.5.2'
    testRuntimeOnly 'com.h2database:h2'

    // Java Mail Sender
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // WebFlux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
}

// QueryDsl Test Code 실행 시, QClass 생성
sourceSets {
    main.java.srcDirs += 'build/generated/source/apt/main'
}

// Gradle Clean 실행 시, QClass 디렉토리 삭제
clean {
    delete file('src/main/generated')
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

sonar {
    properties {
        property "sonar.projectKey", "ITZipProject_itzip_back_a08e7d1d-048d-4a24-882a-266ba11904c2"
        property "sonar.projectName", "itzip_back"
        property "sonar.java.binaries", "$buildDir/classes/java/main"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
    }
}

// jacoco 정보
jacoco {
    toolVersion = '0.8.11'
}

// jacoco Report 생성
jacocoTestReport {
    dependsOn test // test 종속성 추가

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    def QEntityList = [
            'darkoverload/itzip/feature/**/entity/QA*',
            'darkoverload/itzip/feature/**/entity/QB*',
            'darkoverload/itzip/feature/**/entity/QC*',
            'darkoverload/itzip/feature/**/entity/QD*',
            'darkoverload/itzip/feature/**/entity/QE*',
            'darkoverload/itzip/feature/**/entity/QF*',
            'darkoverload/itzip/feature/**/entity/QG*',
            'darkoverload/itzip/feature/**/entity/QH*',
            'darkoverload/itzip/feature/**/entity/QI*',
            'darkoverload/itzip/feature/**/entity/QJ*',
            'darkoverload/itzip/feature/**/entity/QK*',
            'darkoverload/itzip/feature/**/entity/QL*',
            'darkoverload/itzip/feature/**/entity/QM*',
            'darkoverload/itzip/feature/**/entity/QN*',
            'darkoverload/itzip/feature/**/entity/QO*',
            'darkoverload/itzip/feature/**/entity/QP*',
            'darkoverload/itzip/feature/**/entity/QQ*',
            'darkoverload/itzip/feature/**/entity/QR*',
            'darkoverload/itzip/feature/**/entity/QS*',
            'darkoverload/itzip/feature/**/entity/QT*',
            'darkoverload/itzip/feature/**/entity/QU*',
            'darkoverload/itzip/feature/**/entity/QV*',
            'darkoverload/itzip/feature/**/entity/QW*',
            'darkoverload/itzip/feature/**/entity/QX*',
            'darkoverload/itzip/feature/**/entity/QY*',
            'darkoverload/itzip/feature/**/entity/QZ*'
    ]

    def QDomainList = [
            'darkoverload/itzip/feature/**/domain/QA*',
            'darkoverload/itzip/feature/**/domain/QB*',
            'darkoverload/itzip/feature/**/domain/QC*',
            'darkoverload/itzip/feature/**/domain/QD*',
            'darkoverload/itzip/feature/**/domain/QE*',
            'darkoverload/itzip/feature/**/domain/QF*',
            'darkoverload/itzip/feature/**/domain/QG*',
            'darkoverload/itzip/feature/**/domain/QH*',
            'darkoverload/itzip/feature/**/domain/QI*',
            'darkoverload/itzip/feature/**/domain/QJ*',
            'darkoverload/itzip/feature/**/domain/QK*',
            'darkoverload/itzip/feature/**/domain/QL*',
            'darkoverload/itzip/feature/**/domain/QM*',
            'darkoverload/itzip/feature/**/domain/QN*',
            'darkoverload/itzip/feature/**/domain/QO*',
            'darkoverload/itzip/feature/**/domain/QP*',
            'darkoverload/itzip/feature/**/domain/QQ*',
            'darkoverload/itzip/feature/**/domain/QR*',
            'darkoverload/itzip/feature/**/domain/QS*',
            'darkoverload/itzip/feature/**/domain/QT*',
            'darkoverload/itzip/feature/**/domain/QU*',
            'darkoverload/itzip/feature/**/domain/QV*',
            'darkoverload/itzip/feature/**/domain/QW*',
            'darkoverload/itzip/feature/**/domain/QX*',
            'darkoverload/itzip/feature/**/domain/QY*',
            'darkoverload/itzip/feature/**/domain/QZ*'
    ]

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'darkoverload/itzip/global/**',
                    'darkoverload/itzip/mongo/**',
                    'darkoverload/itzip/postgresql/**',
                    'darkoverload/itzip/sample/**',
            ] + QEntityList + QDomainList)
        }))
    }

    // finalizedBy 'jacocoTestCoverageVerification' // jacocoTestReport 태스크가 끝난 후 실행
}

// jacoco Test 유효성 확인
jacocoTestCoverageVerification {
    def QDomainList = []
    for (qPattern in '*.QA'..'*.QZ') { // QClass 대응
        QDomainList.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true // 규칙 활성화 여부
            element = 'CLASS' // 커버리지를 체크할 단위 설정

            // 코드 커버리지를 측정할 때 사용되는 지표
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.30
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.30
            }

            excludes = [
                    '**/common/**',
                    '**/*Application*'
            ] + QDomainList
        }
    }

}